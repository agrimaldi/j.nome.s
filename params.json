{"tagline":"A lightweight genome browser entirely written in javascript.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"J.nome.s","google":"UA-33554564-1","body":"[![Build Status](https://secure.travis-ci.org/agrimaldi/j.nome.s.png)](http://travis-ci.org/agrimaldi/j.nome.s)\r\n\r\n## Introduction\r\n\r\n#### What is j.nome.s\r\n\r\nj.nome.s is a fast, simple, lightweight genome browser.\r\nIt is built on top of [expressjs][expressjs] and [Node.JS][nodejs],\r\nand uses [MongoDB][mongodb] for storing the data.\r\n\r\n#### Why j.nome.s\r\n\r\nCurrent genome browsers include [GBrowse][gbrowse], the [UCSC genome browser][ucsc_browser]\r\nor [Jbrowse][jbrowse]. The main problem with those project, is that they\r\nheavily rely on [perl][perl] and [BioPerl][bioperl] scripts in order to both crunch data\r\nand render the output.\r\nAlthough [perl][perl] is widely used by bioinformaticians, it is a very inelegant\r\nlanguage, very often leading to bloatware.\r\nRepresenting genomes is not an easy task considering the huge amout of data\r\nthat has to be handled and shown in an intelligible way.\r\n\r\nj.nome.s aims to provide a simple genome browser environment, convenient to\r\nboth the user, and the developer.\r\nIt is based on [Node.JS][nodejs], which allowed to build a custom non\r\nIO-blocking server application. The data is stored in a \r\n[MongoDB][mongodb] database, providing a scallable and\r\nefficient way to respectively store and access huge amount of data.\r\n\r\n#### Who\r\n\r\nj.nome.s is an ongoing project initiated by Alexis GRIMALDI and supervised by Avetis KAZARIAN.\r\n\r\n---\r\n\r\n## Summary\r\n\r\n- [Installation](#a1)\r\n    - [Pre-requisites](#a1-1)\r\n    - [Installation](#a1-2)\r\n    - [Updating](#a1-3)\r\n    - [Testing](#a1-4)\r\n    - [Running the j.nome.s server](#a1-5)\r\n- [Loading datasets](#a2)\r\n    - [Reference genome](#a2-1)\r\n    - [Non quantitative data](#a2-2-1)\r\n    - [Quantitative data](#a2-2-2)\r\n- [Configuration](#a3)\r\n * [Global](#a3-1)\r\n * [Non-quantitative data tracks](#a3-2-2-1)\r\n * [Quantitative data tracks](#a3-2-2-2)\r\n\r\n---\r\n\r\n<a name=\"a1\">\r\n## Installation\r\n\r\n<a name=\"a1-1\">\r\n#### Pre-requisites\r\n\r\nBefore installation, please ensure that you installed [Node.JS][nodejs] and [MongoDB][mongodb].\r\nCheck their web pages for more information.\r\n\r\nIn order to get the node module dependencies required to run j.nome.s, you will also\r\nneed [NPM][npm], the node package manager.\r\nPlease follow the instructions provided on the [NPM website][npm] to install npm alongside node. Starting from nodejs 0.8, npm should be included.\r\n\r\n<a name=\"a1-2\">\r\n#### Setting up the j.nome.s server\r\n\r\nClone the repository from github, and install the module dependencies.\r\n```bash\r\n$ git clone git://github.com/agrimaldi/j.nome.s.git\r\n$ cd j.nome.s\r\n$ npm install\r\n```\r\nFinally, you should create a local branch specifically for your personal datasets\r\n```bash\r\n$ git branch my-dataset\r\n$ git checkout my-dataset\r\n```\r\n\r\n<a name=\"a1-3\">\r\n#### Updating\r\n\r\nTo update j.nome.s to the latest version, pull from the repository\r\n```bash\r\n$ git checkout master\r\n$ git pull origin master\r\n```\r\nIf your configuration files are on a separate branch (which you should do), rebase with\r\n```bash\r\n$ git checkout my-branch\r\n$ git rebase master\r\n```\r\n\r\n<a name=\"a1-4\">\r\n#### Running tests\r\n\r\nTo run the tests, just go with\r\n```bash\r\n$ make test\r\n```\r\nThis will setup a demo dataset (of Saccharomyces cerevisiae), run various tests, and remove the demo dataset.\r\nIf you wish to keep the demo dataset around, just run\r\n```bash\r\n$ make install-demo\r\n```\r\nTo remove it, run\r\n```bash\r\n$ make remove-demo\r\n```\r\n\r\n<a name=\"a1-5\">\r\n#### Running the server\r\n\r\nTo run the j.nome.s server, simply execute\r\n```bash\r\n$ node app.js\r\n```\r\nfrom the root directory j.nome.s\r\n\r\nAlternatively, if you wish a more robust running instance, we suggest to use [forever](forever).\r\nTo install it system wide, simple run the following :\r\n```bash\r\n$ npm install -g forever\r\n```\r\nRunning the j.nome.s server in daemon mode through [forever](forever) is as simple as\r\n```bash\r\n$ forever start app.js\r\n```\r\n\r\nEither way, once the j.nome.s server is up and running, point your browser to the machine running it on port 3000.\r\nIf j.nome.s is accessed on the same machine as the server, point your browser to `http://localhost:3000/`\r\nIf you want to remotely access j.nome.s, point your browser to `http://www.myjnomesserver.com:3000/`\r\n\r\n---\r\n\r\n<a name=\"a2\">\r\n## Loading datasets\r\n\r\nAll the data and metadata is stored in a [MongoDB][mongodb] instance, with a precise schema :\r\n\r\n1. The name of the database is the ID of the corresponding dataset.\r\n2. Inside the database, the reference genome sequence is stored in a GridFS, resulting in the `fs.files` and `fs.chunks` collections.\r\n3. The data of your tracks must be contained in a collection in JFF format (a JSON equivalent to the [GFF][gff] format), JWIG format (a JSON equivalent of the [bedgraph][bedgraph] format), or in a [bigwig][bigwig] file.\r\n\r\n<a name=\"a2-1\">\r\n### Reference genome\r\nTo load a new reference genome, use the `loadFastaRef.py` script provided in the `bin/` folder.\r\n\r\n```\r\n./loadFastaRef.py -h\r\nusage: loadFastaRef.py [-h] [-i [FILE]] [-d DATABASE] [-D]\r\n\r\nLoad in MongoDB a FASTA file containing a reference genome.\r\n\r\noptional arguments:\r\n-h, --help            show this help message and exit\r\n-i [FILE], --infile [FILE]\r\n                      Input file.\r\n-d DATABASE, --database DATABASE\r\n                      MongoDB database where the data is stored.\r\n-D, --debug           Debug mode.\r\n```\r\nJust specify the name of the mongo database to use for the new dataset and the FASTA file containing the reference genome, and you are good to go.\r\n\r\n<a name=\"a2-2\">\r\n### Data\r\n\r\n<a name=\"a2-2-1\">\r\n#### Non quantitative data\r\n\r\nThe JFF format follows the [GFF specifications][gff] with the only required field being `_id`, which must be a unique integer in the collection.\r\n```json\r\n{\r\n    \"seqid\" : \"scaffold_1\",\r\n    \"source\" : \"assembly\",\r\n    \"type\" : \"gap\",\r\n    \"start\" : 910,\r\n    \"end\" : 960,\r\n    \"score\" : null,\r\n    \"strand\" : null,\r\n    \"phase\" : null,\r\n    \"_id\" : 0\r\n}\r\n```\r\nTo load non-quantitative data (such as a gene annotation), your raw data must be in JFF format. To convert a gff file into jff, a dedicated script is included in the `bin/` folder:\r\n```bash\r\n$ ./bin/gff2json.py -h\r\nusage: gff2json.py [-h] [-i [FILE]] [-o [FILE]] [-g {2, 3}]\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -i [FILE], --in [FILE]\r\n                        Input file.\r\n  -o [FILE], --out [FILE]\r\n                        Output file.\r\n  -g {2, 3}, --gff_version {2, 3}\r\n                        GFF version of the file to parse.\r\n```\r\nThe script will detect any additional values in the ninth field, and include them nicely in the JSON structure.\r\nThen use the [mongoimport][mongoimport] command to load it in the dataset of your choice.\r\nTypically, it would be something like :\r\n```bash\r\n$ mongoimport -d myDataset -c myTrack --file myTrackData.json\r\n```\r\nCheck the [MongoDB documentation][mongodoc] for more details.\r\n\r\n<a name=\"a2-2-2\">\r\n#### Quantitative data\r\nQuantitative data are currently rendered as profiles, that is a basic X-Y plot.\r\n      \r\nThe raw data should be stored in a tsv or csv file format similar to the [BedGraph format][bedgraph]:\r\n```csv\r\nseqid           start   end     score\r\nscaffold_1      0       26      0\r\nscaffold_1      26      80      1\r\nscaffold_1      80      130     2\r\nscaffold_1      130     157     3\r\nscaffold_1      157     259     4\r\n```\r\nThe bedgraph data can be loaded as is in mongodb and queries can be performed directly on in mongodb. Alternativeley, the bedgraph file can be converted to a bigwig file thanks to a dedicated script.\r\n\r\n<a name=\"a2-2-2-1\">\r\n##### Direct-mongodb adaptor\r\nTo directly load the bedgraph file in mongodb, use the script provided in the `./bin` folder\r\n```bash\r\n$ ./bin/load_bed_profile.py -h\r\nusage: load_bed_profile.py [-h] -i INFILE -d DATABASE -c COLLECTION [-r]\r\n\r\n  ||    Script used to easily load bed profiles.\r\n  ||\r\n  ||       The data should be formated as follow:\r\n  ||\r\n  ||           scaffold_1      0       26      0\r\n  ||           scaffold_1      26      80      1\r\n  ||           scaffold_1      80      130     2\r\n  ||           scaffold_1      130     157     3\r\n  ||           scaffold_1      157     259     4\r\n  ||\r\n  ||       where columns correspond to (from left to right): seqid, start, end, score\r\n        \r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -i INFILE, --infile INFILE\r\n                        Input file.\r\n  -d DATABASE, --db DATABASE\r\n                        Database to use.\r\n  -c COLLECTION, --collection COLLECTION\r\n                        Collection to use.\r\n  -r, --drop            Drop the collection if it already exists.\r\n```\r\nIt will take care of loading the data and creating relevant indexes required for high performance of mongodb in queries handling.\r\nIf you wish to represent oriented profiles (one profile for each strand, all in the same track), profiles for each strand should be generated in the following format :\r\n```csv\r\nseqid           strand  start   end     score\r\nscaffold_1      +        0       26      0\r\nscaffold_1      +        26      80      1\r\nscaffold_1      +        80      130     2\r\nscaffold_1      +        130     157     3\r\nscaffold_1      +        157     259     4\r\n```\r\nand imported in mongodb **in the same** collection using `./bin/load_bed_profile.py`\r\n\r\n<a name=\"a2-2-2-2\">\r\n##### Bigwig file adaptor\r\nA better option is to use the [bigwig][bigwig] format, since it is both faster and less memory hungry. Bigwig files are also significantly smaller than their bedgraph counterparts (up to 6 times smaller). Libraries necessary for handling such files are provided by Jim Kent and are part of the UCSC genome browser. Both the libraries and nodejs bindings are compiled during j.nome.s installation.\r\nUsing it is quite straightforward. A utility script is generated in the `./bin` directory during the setup phase.\r\nIt can be used to convert [bedgraph][bedgraph] files in [bigwig][bigwig]\r\n```bash\r\n$ ./bin/wigToBigWig \r\nwigToBigWig v 4 - Convert ascii format wig file (in fixedStep, variableStep\r\nor bedGraph format) to binary big wig format.\r\nusage:\r\n   wigToBigWig in.wig chrom.sizes out.bw\r\nWhere in.wig is in one of the ascii wiggle formats, but not including track lines\r\nand chrom.sizes is two column: <chromosome name> <size in bases>\r\nand out.bw is the output indexed big wig file.\r\nUse the script: fetchChromSizes to obtain the actual chrom.sizes information\r\nfrom UCSC, please do not make up a chrom sizes from your own information.\r\noptions:\r\n   -blockSize=N - Number of items to bundle in r-tree.  Default 256\r\n   -itemsPerSlot=N - Number of data points bundled at lowest level. Default 1024\r\n   -clip - If set just issue warning messages rather than dying if wig\r\n                  file contains items off end of chromosome.\r\n   -unc - If set, do not use compression.\r\n```\r\nThe locations of the bigwig files will have to be provided in the configuration of the track that should make use of it.\r\nSee the [appropriate section](https://github.com/agrimaldi/j.nome.s/wiki/Configuration) about configuring datasets and tracks.\r\n\r\n---\r\n\r\n<a name=\"a3\">\r\n## Configuration\r\n\r\nEverything in j.nome.s can easily be configured via simple and consistent JSON configuration files.\r\nThese configuration files can be found in `j.nome.s/config`.\r\nIt is strongly advised that you create a separate branch for editing and adding configuration files. See the [Installation section](https://github.com/agrimaldi/j.nome.s/wiki/Configuration#wiki-Installation) for more information.\r\n\r\n<a name=\"a3-1\">\r\n### Global configuration\r\nThe only required file is **global.json** which contains general settings. You\r\ncan then add as many configuration files as you need, one per dataset.\r\nThe `config/global.json` file provides the following information :\r\n```javascript\r\n{\r\n    \"datasets\": {    \r\n        \"Xentr42\": { // Each entry contains metadata of a dataset. The key must be the name of the corresponding mongo database.\r\n            \"file\": \"Xentr42.json\" // The name of the configuration file associated to the dataset. The scope is config/\r\n          , \"name\": \"Xentr42\" // the name of the dataset, which can be used for display.\r\n          , \"description\": \"Xenopus tropicalis genome v4\" // A short description of the dataset.\r\n        }\r\n    }\r\n  , \"style\": { // Each entry maps a style name to raphael style-attributes. This is where you can customize the look of j.nome.s\r\n        \"bgrules\": { // The rules used for the background.\r\n            \"stroke\": \"#eee\"\r\n        }\r\n      , \"ruler\": { // The ruler with precise graduations.\r\n            \"stroke\": \"#000\"\r\n        }\r\n      , \"selectedspan\": { // The rectangle showing the currently selected region.\r\n            \"fill\": \"#00ABFA\"\r\n          , \"fill-opacity\": 0.2\r\n          , \"stroke-width\": 2\r\n        }\r\n      , \"selectionspan\": { // The rectangle showing the region being selected via mouse dragging.\r\n            \"fill\": \"#00ABFA\"\r\n          , \"fill-opacity\": 0.3\r\n          , \"stroke-width\": 2\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<a name=\"a3-2\">\r\n### Datasets configuration\r\nEach dataset should have a separate associated file, which is specified in the `./config/global.json` file\r\n\r\n<a name=\"a3-2-1\">\r\n#### Dataset specific metadata\r\nThe dataset specific configuration should begin with the following key:\r\n```javascript\r\n{\r\n    \"dbname\": \"SacCer-demo\",\r\n//  ...\r\n}\r\n```\r\n\r\n<a name=\"a3-2-2\">\r\n#### Tracks\r\nAfter specifying the database name, each track is included in the `tracks` dictionary.\r\n```javascript\r\n\"tracks\": {\r\n    \"ensembl_genes\": { // Should match the collection name in mongodb\r\n        \"id\": \"ensembl_genes\" // Should match the collection name in mongodb\r\n      , \"name\": \"Ensembl genes\" // Name of the track\r\n      , \"description\": \"Ensembl genes\" // Short description of the track\r\n      , \"type\": ( \"ref\" | \"profile\" | \"oriented-profile\" ) // The type of the track. Determines how it will be displayed \r\n      , \"style\": {\r\n//          ... Style to display\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<a name=\"a3-2-2-1\">\r\n##### Non-quantitative data tracks\r\nNon-quantitative data (such as gene annotation) should be configured this way. Note the `\"type\": \"ref\"` field.\r\n```javascript\r\n\"ensembl_genes\": {\r\n    \"id\": \"ensembl_genes\"\r\n  , \"name\": \"Ensembl genes\"\r\n  , \"description\": \"Ensembl genes\"\r\n  , \"type\": \"ref\" // Use \"ref\" for non-quantitative data\r\n  , \"backend\": \"json\"\r\n  , \"style\": {\r\n        \"fill\": \"purple\" // The color of each block\r\n      , \"stroke\": \"black\" // The color of the outer line\r\n    }\r\n}\r\n```\r\n\r\n<a name=\"a3-2-2-2\">\r\n##### Quantitative data tracks\r\nQuantitative data can be displayed either from mongodb or a bigwig file.\r\n\r\n<a name=\"a3-2-2-2-1\">\r\n###### MongoDB adaptor\r\nIn case the data is queried from mongodb, the backend can be set to \"json\" (although it is the default value).\r\n\r\n<a name=\"a3-2-2-2-1-1\">\r\n####### Standard\r\n```javascript\r\n\"rnaseq\": {\r\n    \"id\": \"rnaseq\"\r\n  , \"name\": \"RNASeq data\"\r\n  , \"description\": \"RNA-Seq data from SRR002051\"\r\n  , \"type\": \"profile\" // Here the type should be set to \"profile\".\r\n  , \"backend\": \"json\" // Use \"json\" backend when querying mongodb directly\r\n  , \"style\": {\r\n        \"gutter\": 25 // Mandatory\r\n      , \"shade\": true\r\n      , \"nostroke\": true // Do not draw a line delimiting the profile, only colorizing the area under the curve\r\n      , \"axis\": \"0 0 1 1\" // Where should the axis labels be (top right bottom left)\r\n      , \"axisxstep\": 10 // Number of ticks on the X axis\r\n      , \"axisystep\": 4 // Number of ticks on the Y axis\r\n    }\r\n}\r\n```\r\n\r\n<a name=\"a3-2-2-2-1-2\">\r\n####### Oriented\r\n```javascript\r\n\"rnaseq_oriented\": {\r\n    \"id\": \"rnaseq_oriented\"\r\n  , \"name\": \"RNASeq data (oriented)\"\r\n  , \"description\": \"RNA-Seq data from SRR002051 (oriented)\"\r\n  , \"type\": \"oriented-profile\" // Here the type should be set to \"oriented-profile\" to display 2 profiles on the same track.\r\n  , \"backend\": \"json\" // Use \"json\" backend when querying mongodb directly\r\n  , \"style\": {\r\n//      ...\r\n      , \"colors\": [\r\n            \"#555599\" // Color of the profile\r\n          , \"#ffffff\" // Mandatory. Set to same color as the background (white)\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n<a name=\"a3-2-2-2-2\">\r\n###### Bigwig adaptor\r\nTo use bigwig files, the `\"backend\"` should be set to `\"bigwig\"`\r\n\r\n<a name=\"a3-2-2-2-2-1\">\r\n####### Standard\r\n```javascript\r\n\"rnaseq_bigwig\": {\r\n    \"id\": \"rnaseq_bigwig\"\r\n  , \"name\": \"RNASeq data (bigwig)\"\r\n  , \"description\": \"RNA-Seq data from SRR002051 (bigwig)\"\r\n  , \"type\": \"profile\"\r\n  , \"backend\": \"bigwig\" // Set the backend to \"bigwig\"\r\n  , \"file\": \"./test/store/SRR002051_chrI-II-III-IV.profile.bw\" // Full path to the bigwig file\r\n  , \"style\": {\r\n//      ... Same as for non-oriented profiles from mongodb\r\n    }\r\n}\r\n```\r\n\r\n<a name=\"a3-2-2-2-2-2\">\r\n####### Oriented\r\n```javascript\r\n\"rnaseq_bigwig_oriented\": {\r\n    \"id\": \"rnaseq_bigwig_oriented\"\r\n  , \"name\": \"Oriented RNASeq data (bigwig)\"\r\n  , \"description\": \"Oriented RNA-Seq data from SRR002051 (bigwig)\"\r\n  , \"type\": \"profile\"\r\n  , \"files\": { // Full paths to the bigwig files containing the sense and antisense strand data.\r\n        \"plus_strand\": \"./test/store/oriented/SRR002051_top_chrI-II-III-IV.profile.bw\"\r\n      , \"minus_strand\": \"./test/store/oriented/SRR002051_bottom_chrI-II-III-IV.profile.bw\"\r\n    }\r\n  , \"backend\": \"bigwig\" // Set the backend to \"bigwig\"\r\n  , \"style\": {\r\n//      ... Same as for oriented profiles from mongodb\r\n    }\r\n}\r\n```\r\n\r\n\r\n[mongodoc]: http://www.mongodb.org/display/DOCS/Home\r\n[mongoimport]: http://www.mongodb.org/display/DOCS/Import+Export+Tools\r\n[gff]: http://www.sanger.ac.uk/resources/software/gff/spec.html\r\n[bedgraph]: https://cgwb.nci.nih.gov/goldenPath/help/bedgraph.html\r\n[bigwig]: http://genome.ucsc.edu/goldenPath/help/bigWig.html\r\n[npm]: http://npmjs.org/\r\n[forever]: https://github.com/nodejitsu/forever/\r\n[gbrowse]: http://www.gbrowse.org/index.html\r\n[ucsc_browser]: http://genome.ucsc.edu/\r\n[jbrowse]: http://jbrowse.org/\r\n[perl]: http://www.perl.org/\r\n[bioperl]: http://www.bioperl.org/\r\n[expressjs]: http://expressjs.com/\r\n[nodejs]: http://nodejs.org/\r\n[mongodb]: http://www.mongodb.org/\r\n[mongolian]: https://github.com/marcello3d/node-mongolian"}